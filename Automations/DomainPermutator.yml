commonfields:
  id: 4fdaece3-852a-46ec-8534-dae7ffe8ca78
  version: 6
vcShouldKeepItemLegacyProdMachine: false
name: DomainPermutator
script: |+
  import re
  import urllib.request
  import urllib.parse


  ''' Methods '''

  VALID_FQDN_REGEX = re.compile(r'(?=^.{4,253}$)(^((?!-)[a-z0-9-]{1,63}(?<!-)\.)+[a-z0-9-]{2,63}$)', re.IGNORECASE)

  try:
      import idna
  except ImportError:
      class idna:
          @staticmethod
          def decode(domain):
              return domain.encode().decode('idna')
          @staticmethod
          def encode(domain):
              return domain.encode('idna')

  def domain_tld(domain):
      try:
          from tld import parse_tld
      except ImportError:
          ctld = ['org', 'com', 'net', 'gov', 'edu', 'co', 'mil', 'nom', 'ac', 'info', 'biz']
          d = domain.rsplit('.', 3)
          if len(d) == 2:
              return '', d[0], d[1]
          if len(d) > 2:
              if d[-2] in ctld:
                  return '.'.join(d[:-3]), d[-3], '.'.join(d[-2:])
              else:
                  return '.'.join(d[:-2]), d[-2], d[-1]
      else:
          d = parse_tld(domain, fix_protocol=True)[::-1]
          if d[1:] == d[:-1] and None in d:
              d = tuple(domain.rsplit('.', 2))
              d = ('',) * (3-len(d)) + d
          return d

  class UrlParser():
      def __init__(self, url):
          u = urllib.parse.urlparse(url if '://' in url else 'http://{}'.format(url))
          self.domain = u.hostname.lower()
          self.domain = idna.encode(self.domain).decode()
          if not self._validate_domain(self.domain):
              raise ValueError('Invalid domain name') from None
          self.scheme = u.scheme
          if self.scheme not in ('http', 'https'):
              raise ValueError('Invalid scheme') from None
          self.username = u.username
          self.password = u.password
          self.port = u.port
          self.path = u.path
          self.query = u.query
          self.fragment = u.fragment

      def _validate_domain(self, domain):
          if len(domain) > 253:
              return False
          if VALID_FQDN_REGEX.match(domain):
              try:
                  _ = idna.decode(domain)
              except Exception:
                  return False
              else:
                  return True
          return False

      def full_uri(self, domain=None):
          uri = '{}://'.format(self.scheme)
          if self.username:
              uri += self.username
              if self.password:
                  uri += ':{}'.format(self.password)
              uri += '@'
          uri += self.domain if not domain else domain
          if self.port:
              uri += ':{}'.format(self.port)
          if self.path:
              uri += self.path
          if self.query:
              uri += '?{}'.format(self.query)
          if self.fragment:
              uri += '#{}'.format(self.fragment)
          return uri

  class Permutation(dict):
      def __getattr__(self, item):
          if item in self:
              return self[item]
          raise AttributeError("object has no attribute '{}'".format(item)) from None

      __setattr__ = dict.__setitem__

      def __init__(self, fuzzer='', domain=''):
          super(dict, self).__init__()
          self['fuzzer'] = fuzzer
          self['domain'] = domain

      def __hash__(self):
          return hash(self['domain'])

      def __eq__(self, other):
          return self['domain'] == other['domain']

      def __lt__(self, other):
          return self['fuzzer'] + self['domain'] < other['fuzzer'] + other['domain']

      def is_registered(self):
          return len(self) > 2

  class Fuzzer():
      def __init__(self, domain, dictionary=[], tld_dictionary=[]):
          self.subdomain, self.domain, self.tld = domain_tld(domain)
          self.domain = idna.decode(self.domain)
          self.dictionary = list(dictionary)
          self.tld_dictionary = list(tld_dictionary)
          self.domains = set()
          self.qwerty = {
              '1': '2q', '2': '3wq1', '3': '4ew2', '4': '5re3', '5': '6tr4', '6': '7yt5', '7': '8uy6', '8': '9iu7', '9': '0oi8', '0': 'po9',
              'q': '12wa', 'w': '3esaq2', 'e': '4rdsw3', 'r': '5tfde4', 't': '6ygfr5', 'y': '7uhgt6', 'u': '8ijhy7', 'i': '9okju8', 'o': '0plki9', 'p': 'lo0',
              'a': 'qwsz', 's': 'edxzaw', 'd': 'rfcxse', 'f': 'tgvcdr', 'g': 'yhbvft', 'h': 'ujnbgy', 'j': 'ikmnhu', 'k': 'olmji', 'l': 'kop',
              'z': 'asx', 'x': 'zsdc', 'c': 'xdfv', 'v': 'cfgb', 'b': 'vghn', 'n': 'bhjm', 'm': 'njk'
              }
          self.qwertz = {
              '1': '2q', '2': '3wq1', '3': '4ew2', '4': '5re3', '5': '6tr4', '6': '7zt5', '7': '8uz6', '8': '9iu7', '9': '0oi8', '0': 'po9',
              'q': '12wa', 'w': '3esaq2', 'e': '4rdsw3', 'r': '5tfde4', 't': '6zgfr5', 'z': '7uhgt6', 'u': '8ijhz7', 'i': '9okju8', 'o': '0plki9', 'p': 'lo0',
              'a': 'qwsy', 's': 'edxyaw', 'd': 'rfcxse', 'f': 'tgvcdr', 'g': 'zhbvft', 'h': 'ujnbgz', 'j': 'ikmnhu', 'k': 'olmji', 'l': 'kop',
              'y': 'asx', 'x': 'ysdc', 'c': 'xdfv', 'v': 'cfgb', 'b': 'vghn', 'n': 'bhjm', 'm': 'njk'
              }
          self.azerty = {
              '1': '2a', '2': '3za1', '3': '4ez2', '4': '5re3', '5': '6tr4', '6': '7yt5', '7': '8uy6', '8': '9iu7', '9': '0oi8', '0': 'po9',
              'a': '2zq1', 'z': '3esqa2', 'e': '4rdsz3', 'r': '5tfde4', 't': '6ygfr5', 'y': '7uhgt6', 'u': '8ijhy7', 'i': '9okju8', 'o': '0plki9', 'p': 'lo0m',
              'q': 'zswa', 's': 'edxwqz', 'd': 'rfcxse', 'f': 'tgvcdr', 'g': 'yhbvft', 'h': 'ujnbgy', 'j': 'iknhu', 'k': 'olji', 'l': 'kopm', 'm': 'lp',
              'w': 'sxq', 'x': 'wsdc', 'c': 'xdfv', 'v': 'cfgb', 'b': 'vghn', 'n': 'bhj'
              }
          self.keyboards = [self.qwerty, self.qwertz, self.azerty]
          self.glyphs = {
              '0': ['o'],
              '1': ['l', 'i'],
              '2': ['ƻ'],
              '3': ['8'],
              '5': ['ƽ'],
              '6': ['9'],
              '8': ['3'],
              '9': ['6'],
              'a': ['à', 'á', 'à', 'â', 'ã', 'ä', 'å', 'ɑ', 'ạ', 'ǎ', 'ă', 'ȧ', 'ą', 'ə'],
              'b': ['d', 'lb', 'ʙ', 'ɓ', 'ḃ', 'ḅ', 'ḇ', 'ƅ'],
              'c': ['e', 'ƈ', 'ċ', 'ć', 'ç', 'č', 'ĉ', 'ᴄ'],
              'd': ['b', 'cl', 'dl', 'ɗ', 'đ', 'ď', 'ɖ', 'ḑ', 'ḋ', 'ḍ', 'ḏ', 'ḓ'],
              'e': ['c', 'é', 'è', 'ê', 'ë', 'ē', 'ĕ', 'ě', 'ė', 'ẹ', 'ę', 'ȩ', 'ɇ', 'ḛ'],
              'f': ['ƒ', 'ḟ'],
              'g': ['q', 'ɢ', 'ɡ', 'ġ', 'ğ', 'ǵ', 'ģ', 'ĝ', 'ǧ', 'ǥ'],
              'h': ['lh', 'ĥ', 'ȟ', 'ħ', 'ɦ', 'ḧ', 'ḩ', 'ⱨ', 'ḣ', 'ḥ', 'ḫ', 'ẖ'],
              'i': ['1', 'l', 'í', 'ì', 'ï', 'ı', 'ɩ', 'ǐ', 'ĭ', 'ỉ', 'ị', 'ɨ', 'ȋ', 'ī', 'ɪ'],
              'j': ['ʝ', 'ǰ', 'ɉ', 'ĵ'],
              'k': ['lk', 'ik', 'lc', 'ḳ', 'ḵ', 'ⱪ', 'ķ', 'ᴋ'],
              'l': ['1', 'i', 'ɫ', 'ł'],
              'm': ['n', 'nn', 'rn', 'rr', 'ṁ', 'ṃ', 'ᴍ', 'ɱ', 'ḿ'],
              'n': ['m', 'r', 'ń', 'ṅ', 'ṇ', 'ṉ', 'ñ', 'ņ', 'ǹ', 'ň', 'ꞑ'],
              'o': ['0', 'ȯ', 'ọ', 'ỏ', 'ơ', 'ó', 'ö', 'ᴏ'],
              'p': ['ƿ', 'ƥ', 'ṕ', 'ṗ'],
              'q': ['g', 'ʠ'],
              'r': ['ʀ', 'ɼ', 'ɽ', 'ŕ', 'ŗ', 'ř', 'ɍ', 'ɾ', 'ȓ', 'ȑ', 'ṙ', 'ṛ', 'ṟ'],
              's': ['ʂ', 'ś', 'ṣ', 'ṡ', 'ș', 'ŝ', 'š', 'ꜱ'],
              't': ['ţ', 'ŧ', 'ṫ', 'ṭ', 'ț', 'ƫ'],
              'u': ['ᴜ', 'ǔ', 'ŭ', 'ü', 'ʉ', 'ù', 'ú', 'û', 'ũ', 'ū', 'ų', 'ư', 'ů', 'ű', 'ȕ', 'ȗ', 'ụ'],
              'v': ['ṿ', 'ⱱ', 'ᶌ', 'ṽ', 'ⱴ', 'ᴠ'],
              'w': ['vv', 'ŵ', 'ẁ', 'ẃ', 'ẅ', 'ⱳ', 'ẇ', 'ẉ', 'ẘ', 'ᴡ'],
              'x': ['ẋ', 'ẍ'],
              'y': ['ʏ', 'ý', 'ÿ', 'ŷ', 'ƴ', 'ȳ', 'ɏ', 'ỿ', 'ẏ', 'ỵ'],
              'z': ['ʐ', 'ż', 'ź', 'ᴢ', 'ƶ', 'ẓ', 'ẕ', 'ⱬ']
              }

      def _bitsquatting(self):
          masks = [1, 2, 4, 8, 16, 32, 64, 128]
          chars = set('abcdefghijklmnopqrstuvwxyz0123456789-')
          for i, c in enumerate(self.domain):
              for mask in masks:
                  b = chr(ord(c) ^ mask)
                  if b in chars:
                      yield self.domain[:i] + b + self.domain[i+1:]

      def _homoglyph(self):
          def mix(domain):
              glyphs = self.glyphs
              for w in range(1, len(domain)):
                  for i in range(len(domain)-w+1):
                      pre = domain[:i]
                      win = domain[i:i+w]
                      suf = domain[i+w:]
                      for c in win:
                          for g in glyphs.get(c, []):
                              yield pre + win.replace(c, g) + suf
          result1 = set(mix(self.domain))
          result2 = set()
          for r in result1:
              result2.update(set(mix(r)))
          return result1 | result2

      def _hyphenation(self):
          return {self.domain[:i] + '-' + self.domain[i:] for i in range(1, len(self.domain))}

      def _insertion(self):
          result = set()
          for i in range(1, len(self.domain)-1):
              prefix, orig_c, suffix = self.domain[:i], self.domain[i], self.domain[i+1:]
              for c in (c for keys in self.keyboards for c in keys.get(orig_c, [])):
                  result.update({
                      prefix + c + orig_c + suffix,
                      prefix + orig_c + c + suffix
                  })
          return result

      def _omission(self):
          return {self.domain[:i] + self.domain[i+1:] for i in range(len(self.domain))}

      def _repetition(self):
          return {self.domain[:i] + c + self.domain[i:] for i, c in enumerate(self.domain)}

      def _replacement(self):
          for i, c in enumerate(self.domain):
              pre = self.domain[:i]
              suf = self.domain[i+1:]
              for layout in self.keyboards:
                  for r in layout.get(c, ''):
                      yield pre + r + suf

      def _subdomain(self):
          for i in range(1, len(self.domain)-1):
              if self.domain[i] not in ['-', '.'] and self.domain[i-1] not in ['-', '.']:
                  yield self.domain[:i] + '.' + self.domain[i:]

      def _transposition(self):
          return {self.domain[:i] + self.domain[i+1] + self.domain[i] + self.domain[i+2:] for i in range(len(self.domain)-1)}

      def _vowel_swap(self):
          vowels = 'aeiou'
          for i in range(0, len(self.domain)):
              for vowel in vowels:
                  if self.domain[i] in vowels:
                      yield self.domain[:i] + vowel + self.domain[i+1:]

      def _addition(self):
          return {self.domain + chr(i) for i in (*range(48, 58), *range(97, 123))}

      def _dictionary(self):
          result = set()
          for word in self.dictionary:
              if not (self.domain.startswith(word) and self.domain.endswith(word)):
                  result.update({
                      self.domain + '-' + word,
                      self.domain + word,
                      word + '-' + self.domain,
                      word + self.domain
                  })
          if '-' in self.domain:
              parts = self.domain.split('-')
              for word in self.dictionary:
                  result.update({
                      '-'.join(parts[:-1]) + '-' + word,
                      word + '-' + '-'.join(parts[1:])
                  })
          return result

      def _tld(self):
          if self.tld in self.tld_dictionary:
              self.tld_dictionary.remove(self.tld)
          return set(self.tld_dictionary)

      def generate(self):
          self.domains.add(Permutation(fuzzer='*original', domain='.'.join(filter(None, [self.subdomain, self.domain, self.tld]))))
          for f_name in [
              'addition', 'bitsquatting', 'homoglyph', 'hyphenation',
              'insertion', 'omission', 'repetition', 'replacement',
              'subdomain', 'transposition', 'vowel-swap', 'dictionary',
          ]:
              f = getattr(self, '_' + f_name.replace('-', '_'))
              for domain in f():
                  self.domains.add(Permutation(fuzzer=f_name, domain='.'.join(filter(None, [self.subdomain, domain, self.tld]))))
          for tld in self._tld():
              self.domains.add(Permutation(fuzzer='tld-swap', domain='.'.join(filter(None, [self.subdomain, self.domain, tld]))))
          if '.' in self.tld:
              self.domains.add(Permutation(fuzzer='various', domain='.'.join(filter(None, [self.subdomain, self.domain, self.tld.split('.')[-1]]))))
              self.domains.add(Permutation(fuzzer='various', domain='.'.join(filter(None, [self.subdomain, self.domain + self.tld]))))
          if '.' not in self.tld:
              self.domains.add(Permutation(fuzzer='various', domain='.'.join(filter(None, [self.subdomain, self.domain + self.tld, self.tld]))))
          if self.tld != 'com' and '.' not in self.tld:
              self.domains.add(Permutation(fuzzer='various', domain='.'.join(filter(None, [self.subdomain, self.domain + '-' + self.tld, 'com']))))
          if self.subdomain:
              self.domains.add(Permutation(fuzzer='various', domain='.'.join([self.subdomain + self.domain, self.tld])))
              self.domains.add(Permutation(fuzzer='various', domain='.'.join([self.subdomain + '-' + self.domain, self.tld])))
          def _punycode(domain):
              try:
                  domain['domain'] = idna.encode(domain['domain']).decode()
              except Exception:
                  domain['domain'] = ''
              return domain
          self.domains = set(map(_punycode, self.domains))
          for domain in self.domains.copy():
              if not VALID_FQDN_REGEX.match(domain.get('domain')):
                  self.domains.discard(domain)

      def permutations(self, registered=False, unregistered=False, dns_all=False):
          if (registered == False and unregistered == False) or (registered == True and unregistered == True):
              domains = self.domains.copy()
          elif registered == True:
              domains = set({x for x in self.domains.copy() if x.is_registered()})
          elif unregistered == True:
              domains = set({x for x in self.domains.copy() if not x.is_registered()})
          if not dns_all:
              for domain in domains:
                  for k in ('dns_ns', 'dns_a', 'dns_aaaa', 'dns_mx'):
                      if k in domain:
                          domain[k] = domain[k][:1]
          return sorted(domains)

  def check_perm_match(home_domain,foreign_domain):
      try:
          url = UrlParser(home_domain)
          url2 = UrlParser(foreign_domain)
          dictionary = []
          tld = []
          fuzz = Fuzzer(url.domain, dictionary=dictionary, tld_dictionary=tld)
          fuzz.generate()
          domains = fuzz.domains
          for item in domains:
              if url2.domain == item.domain:
                  return {"check":True,"fuzzer":item.fuzzer}
          return {"check":False,"fuzzer":None}
      except Exception:
          print('invalid domain names')




  ''' COMMAND FUNCTION '''


  def match_permutators(args: Dict[str, Any]):

      home_domain = args.get('home_domain')
      foreign_domain = args.get('foreign_domain')

      if not home_domain:
          raise ValueError('Home domain not specified')
      if not foreign_domain:
          raise ValueError('Foreign domain not specified')

      # Call the standalone function and get the raw response
      perm_match = check_perm_match(home_domain,foreign_domain)
      result = {"url":foreign_domain,"result":perm_match['check'],"fuzzer":perm_match['fuzzer']}
      results = CommandResults(
          outputs_prefix='DomainPermutator',
          outputs_key_field='id',
          outputs=result
      )
      return results
  # TODO: ADD additional command functions that translate XSOAR inputs/outputs


  ''' MAIN FUNCTION '''


  def main():
      try:
          # TODO: replace the invoked command function with yours
          return_results(match_permutators(demisto.args()))
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute DomainPermutator. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

type: python
tags: []
comment: Check if foreign domain matches a permutation of home domain - if true signifies
  potential typosquatting and/or advanced phishing.
enabled: true
args:
- name: home_domain
  required: true
  default: false
  description: The domain to permutate.
- name: foreign_domain
  description: The foreign domain to check.
outputs:
- contextPath: DomainPermutator
  type: boolean
scripttarget: 0
subtype: python3
pswd: ""
runonce: false
dockerimage: demisto/domainpermutator
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}
